from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from states.order_state import OrderStates
from keyboards.category import choose_category_kb
from keyboards.products import build_products_kb
from keyboards.quantity import quantity_back_kb
from keyboards.new_order import new_order_kb
from data.products import STICKS, CIGARETTES
from config import settings

router = Router()

@router.callback_query(F.data == "order_start")
async def order_start(callback: CallbackQuery):
    try:
        # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç ‚Äî —Ä–µ–¥–∞–≥—É—î–º–æ
        if callback.message.text:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=choose_category_kb()
            )
        else:
            # fallback —è–∫—â–æ —Ü–µ –±—É–ª–æ —Ñ–æ—Ç–æ –∞–±–æ —â–æ—Å—å —ñ–Ω—à–µ
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=choose_category_kb()
            )
    except Exception as e:
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.",
        )
    await callback.answer()



@router.callback_query(F.data == "category_sticks")
async def sticks_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–∫–∏:",
        reply_markup=build_products_kb(STICKS, "sticks")
    )
    await callback.answer()


@router.callback_query(F.data == "category_cigs")
async def cigs_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–≥–∞—Ä–µ—Ç—ã:",
        reply_markup=build_products_kb(CIGARETTES, "cigs")
    )
    await callback.answer()

@router.callback_query(F.data.startswith("product:"))
async def product_selected(callback: CallbackQuery, state: FSMContext):
    _, category, product_name = callback.data.split(":", 2)

    from data.products import STICKS, CIGARETTES
    products = STICKS if category == "sticks" else CIGARETTES
    price = products[product_name]

    await state.update_data(product=product_name, price=price)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{product_name}</b> –∑–∞ <b>{price}‚Ç¨</b>.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—á–µ–∫:",
        reply_markup=quantity_back_kb()
    )

    await state.set_state(OrderStates.waiting_for_quantity)
    await callback.answer()


@router.callback_query(F.data == "quantity_back")
async def back_to_products(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product = data.get("product")

    from data.products import STICKS, CIGARETTES
    if product in STICKS:
        category = "sticks"
        products = STICKS
    elif product in CIGARETTES:
        category = "cigs"
        products = CIGARETTES
    else:
        await callback.message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ.")
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ:",
        reply_markup=build_products_kb(products, category)
    )
    await callback.answer()
    await state.clear()  # –æ—á–∏—â–∞—î–º–æ FSM, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É

@router.callback_query(F.data == "new_order")
async def new_order(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=choose_category_kb()
    )
    await callback.answer()


@router.message(OrderStates.waiting_for_quantity)
async def get_quantity(message: Message, state: FSMContext, bot: Bot):
    if not message.text.isdigit():
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    count = int(message.text)
    data = await state.get_data()
    product = data["product"]
    price = data["price"]
    total = price * count

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
        
        "üìó –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: \n\n"
        f"<b>{product}</b>\n"
        f"–ö–æ–ª-–≤–æ: {count} —à—Ç\n"
        f"–°—É–º–º–∞: <b>{total}‚Ç¨</b>\n\n"
        f"HiLo ‚ù§Ô∏è\n"
        f"–ß—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–∏–Ω–æ–∫ ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ —á–∞—Ç: https://t.me/+JU9k897lp282MmI0",
        reply_markup=new_order_kb()
    )


    user_tag = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    await bot.send_message(
        chat_id=settings.ADMIN_CHANNEL_ID,
        text=(
            f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_tag}\n"
            f"–¢–æ–≤–∞—Ä: {product}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —à—Ç\n"
            f"–°—É–º–º–∞: {total}‚Ç¨\n\n"
            "@hilo_manager"
        )
    )

    await state.clear()